/* tslint:disable */
/* eslint-disable */
/**
 * MONEI API v1
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.6.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from '../configuration';
import type {AxiosPromise, AxiosInstance, RawAxiosRequestConfig} from '../axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap
} from '../base';
// @ts-ignore
import type {BadRequestError} from '../model';
// @ts-ignore
import type {CancelPaymentRequest} from '../model';
// @ts-ignore
import type {CapturePaymentRequest} from '../model';
// @ts-ignore
import type {ConfirmPaymentRequest} from '../model';
// @ts-ignore
import type {CreatePaymentRequest} from '../model';
// @ts-ignore
import type {InternalServerError} from '../model';
// @ts-ignore
import type {NotFoundError} from '../model';
// @ts-ignore
import type {Payment} from '../model';
// @ts-ignore
import type {RecurringPaymentRequest} from '../model';
// @ts-ignore
import type {RefundPaymentRequest} from '../model';
// @ts-ignore
import type {SendPaymentLinkRequest} from '../model';
// @ts-ignore
import type {SendPaymentReceiptRequest} from '../model';
// @ts-ignore
import type {SendPaymentRequestRequest} from '../model';
// @ts-ignore
import type {ServiceUnavailableError} from '../model';
// @ts-ignore
import type {UnauthorizedError} from '../model';
// @ts-ignore
import type {UnprocessableEntityError} from '../model';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Releases reserved funds from a previously authorized payment. This endpoint can only be used with payments in `AUTHORIZED` status.  This operation is part of the two-step authorization flow:  1. **Authorize**: Create a payment with `transactionType: AUTH` to reserve funds 2. **Cancel**: Release the reserved funds if you decide not to capture the payment  Cancellation makes the reserved funds available to the customer again and prevents you from being able to capture those funds in the future. Once cancelled, an authorization cannot be reactivated.
     * @summary Cancel Payment
     * @param {string} id The payment ID
     * @param {CancelPaymentRequest} [cancelPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancel: async (
      id: string,
      cancelPaymentRequest?: CancelPaymentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('cancel', 'id', id);
      const localVarPath = `/payments/{id}/cancel`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cancelPaymentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Captures funds from a previously authorized payment. This endpoint can only be used with payments in `AUTHORIZED` status.  This operation completes the two-step authorization flow:  1. **Authorize**: Create a payment with `transactionType: AUTH` to reserve funds 2. **Capture**: Transfer the reserved funds to your account when ready to fulfill the order  **Important**: Authorized payments expire after exactly seven days. After expiration, they will be marked as `EXPIRED` and can no longer be captured. Be sure to capture funds within this timeframe or communicate with your customer about a new payment.
     * @summary Capture Payment
     * @param {string} id The payment ID
     * @param {CapturePaymentRequest} [capturePaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    capture: async (
      id: string,
      capturePaymentRequest?: CapturePaymentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('capture', 'id', id);
      const localVarPath = `/payments/{id}/capture`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        capturePaymentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Confirms a payment that was created without payment details. This endpoint can only be used with payments in `PENDING` status.  The two-step payment flow:  1. **Create**: First, create a payment without payment details (status: `PENDING`) 2. **Confirm**: Then provide payment details to complete the transaction  When confirming a payment, you can use:  - A newly generated `paymentToken` from [monei.js Components](https://docs.monei.com/monei-js/overview/) - A permanent `paymentToken` from a previous payment (generated with `generatePaymentToken: true`)  Using permanent payment tokens enables one-click checkout experiences for returning customers without requiring them to re-enter their payment information.  You can provide additional customer information during confirmation, which will override any corresponding information originally passed in the payment creation request.
     * @summary Confirm Payment
     * @param {string} id The payment ID
     * @param {ConfirmPaymentRequest} [confirmPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirm: async (
      id: string,
      confirmPaymentRequest?: ConfirmPaymentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('confirm', 'id', id);
      const localVarPath = `/payments/{id}/confirm`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        confirmPaymentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Creates a new payment with the specified parameters.  You can create a payment in two ways:  1. **Immediate processing**: Provide a `paymentToken` or `paymentMethod` - The payment will be processed instantly 2. **Deferred processing**: Create without payment details - The payment remains in `PENDING` status until you    confirm it later using the [confirm endpoint](https://docs.monei.com/apis/rest/payments-confirm/)  When creating a payment without payment details, you can redirect customers to the hosted payment page where they can select their preferred payment method and complete the transaction.  For immediate processing, use one of these token options:  - A temporary `paymentToken` generated on the frontend using [monei.js Components](https://docs.monei.com/monei-js/overview/) - A permanent `paymentToken` from a previous successful payment (when `generatePaymentToken: true` was included)  Permanent tokens enable one-click checkout experiences for returning customers by allowing you to securely store and reuse payment details without requiring customers to re-enter their information.
     * @summary Create Payment
     * @param {CreatePaymentRequest} createPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createPaymentRequest: CreatePaymentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createPaymentRequest' is not null or undefined
      assertParamExists('create', 'createPaymentRequest', createPaymentRequest);
      const localVarPath = `/payments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPaymentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Retrieves the complete details of an existing payment by its unique ID.  This endpoint returns all available information about the payment, including its current status, amount, customer details, timestamps, and transaction history. Use this to check the status of a payment, verify payment details, or retrieve information for your records.  Supply the unique payment ID that was returned from your previous request.
     * @summary Get Payment
     * @param {string} id The payment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('get', 'id', id);
      const localVarPath = `/payments/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Creates a subsequent charge using the payment details from a previous transaction.  This endpoint enables recurring billing and subscription payments by:  - Using the same payment method as the original payment - Charging the customer without requiring them to re-enter payment details - Supporting variable or fixed amounts (defaults to the original payment amount if not specified)  **Prerequisites:**  1. The initial payment must be created with the `sequence` parameter 2. The initial payment will return a `sequenceId` in the response 3. This `sequenceId` must be provided in the URL path when making subsequent recurring charges  Ideal for subscription services, membership renewals, and installment payments.  **Need more advanced subscription management?** For comprehensive subscription management with features like billing cycles, trial periods, and automatic recurring billing, consider using the [Subscriptions API](https://docs.monei.com/apis/rest/subscriptions/) instead. It provides a complete solution for creating and managing subscription-based services.
     * @summary Recurring Payment
     * @param {string} sequenceId The sequence ID
     * @param {RecurringPaymentRequest} [recurringPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recurring: async (
      sequenceId: string,
      recurringPaymentRequest?: RecurringPaymentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'sequenceId' is not null or undefined
      assertParamExists('recurring', 'sequenceId', sequenceId);
      const localVarPath = `/payments/{sequenceId}/recurring`.replace(
        `{${'sequenceId'}}`,
        encodeURIComponent(String(sequenceId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        recurringPaymentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Returns funds from a completed payment back to the customer\'s original payment method.  **Refund options:**  - **Full refund**: Return the entire payment amount - **Partial refund**: Specify an amount less than the original payment - **Multiple partial refunds**: Issue several partial refunds until the total payment amount is reached  **Limitations:**  - You can only refund payments that have been successfully processed - A payment can only be refunded up to its original amount - Once fully refunded, a payment cannot be refunded again - Attempting to refund more than the remaining available amount will result in an error
     * @summary Refund Payment
     * @param {string} id The payment ID
     * @param {RefundPaymentRequest} [refundPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refund: async (
      id: string,
      refundPaymentRequest?: RefundPaymentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('refund', 'id', id);
      const localVarPath = `/payments/{id}/refund`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refundPaymentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Sends a payment link to the customer through their preferred communication channel.  **This API can only be used for payments with the following status:**  - Pending  **Delivery channels are automatically selected based on available customer information:**  - If customer email is available: Link is sent via email - If customer phone is available: Link is sent via WhatsApp - If WhatsApp delivery fails: Link is sent via SMS as a fallback  The payment link allows customers to complete the payment at their convenience using their preferred payment method on the secure MONEI payment page. If no customer contact information is provided, the system will use the details stored in the payment record.
     * @summary Send Payment Link
     * @param {string} id The payment ID
     * @param {SendPaymentLinkRequest} [sendPaymentLinkRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendLink: async (
      id: string,
      sendPaymentLinkRequest?: SendPaymentLinkRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('sendLink', 'id', id);
      const localVarPath = `/payments/{id}/link`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sendPaymentLinkRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Sends a payment receipt to the customer through their preferred communication channel.  **This API can only be used for payments with the following status:**  - Succeeded  **Delivery channels are automatically selected based on available customer information:**  - If customer email is available: Receipt is sent via email - If customer phone is available: Receipt is sent via WhatsApp - If WhatsApp delivery fails: Receipt is sent via SMS as a fallback  The receipt includes payment details such as amount, date, transaction ID, and merchant information, providing customers with a record of their successful transaction. If no customer contact information is provided, the system will use the details stored in the payment record.
     * @summary Send Payment Receipt
     * @param {string} id The payment ID
     * @param {SendPaymentReceiptRequest} [sendPaymentReceiptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendReceipt: async (
      id: string,
      sendPaymentReceiptRequest?: SendPaymentReceiptRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('sendReceipt', 'id', id);
      const localVarPath = `/payments/{id}/receipt`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sendPaymentReceiptRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Sends a direct payment request to the customer\'s phone with smart channel selection.  **Smart delivery logic based on customer phone capabilities:**  - If the phone number is registered with Bizum and that payment method is available:   The customer receives a push notification in their banking app to instantly approve the payment - If Bizum is not available or the phone is not registered with Bizum:   The customer receives a payment link via WhatsApp to complete the payment  This endpoint provides a streamlined payment experience, especially for Spanish customers with Bizum integration, enabling quick and convenient mobile payments.
     * @summary Send Payment Request
     * @param {string} id The payment ID
     * @param {SendPaymentRequestRequest} sendPaymentRequestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendRequest: async (
      id: string,
      sendPaymentRequestRequest: SendPaymentRequestRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('sendRequest', 'id', id);
      // verify required parameter 'sendPaymentRequestRequest' is not null or undefined
      assertParamExists('sendRequest', 'sendPaymentRequestRequest', sendPaymentRequestRequest);
      const localVarPath = `/payments/{id}/rtp`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sendPaymentRequestRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration);
  return {
    /**
     * Releases reserved funds from a previously authorized payment. This endpoint can only be used with payments in `AUTHORIZED` status.  This operation is part of the two-step authorization flow:  1. **Authorize**: Create a payment with `transactionType: AUTH` to reserve funds 2. **Cancel**: Release the reserved funds if you decide not to capture the payment  Cancellation makes the reserved funds available to the customer again and prevents you from being able to capture those funds in the future. Once cancelled, an authorization cannot be reactivated.
     * @summary Cancel Payment
     * @param {string} id The payment ID
     * @param {CancelPaymentRequest} [cancelPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancel(
      id: string,
      cancelPaymentRequest?: CancelPaymentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cancel(
        id,
        cancelPaymentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.cancel']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Captures funds from a previously authorized payment. This endpoint can only be used with payments in `AUTHORIZED` status.  This operation completes the two-step authorization flow:  1. **Authorize**: Create a payment with `transactionType: AUTH` to reserve funds 2. **Capture**: Transfer the reserved funds to your account when ready to fulfill the order  **Important**: Authorized payments expire after exactly seven days. After expiration, they will be marked as `EXPIRED` and can no longer be captured. Be sure to capture funds within this timeframe or communicate with your customer about a new payment.
     * @summary Capture Payment
     * @param {string} id The payment ID
     * @param {CapturePaymentRequest} [capturePaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async capture(
      id: string,
      capturePaymentRequest?: CapturePaymentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.capture(
        id,
        capturePaymentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.capture']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Confirms a payment that was created without payment details. This endpoint can only be used with payments in `PENDING` status.  The two-step payment flow:  1. **Create**: First, create a payment without payment details (status: `PENDING`) 2. **Confirm**: Then provide payment details to complete the transaction  When confirming a payment, you can use:  - A newly generated `paymentToken` from [monei.js Components](https://docs.monei.com/monei-js/overview/) - A permanent `paymentToken` from a previous payment (generated with `generatePaymentToken: true`)  Using permanent payment tokens enables one-click checkout experiences for returning customers without requiring them to re-enter their payment information.  You can provide additional customer information during confirmation, which will override any corresponding information originally passed in the payment creation request.
     * @summary Confirm Payment
     * @param {string} id The payment ID
     * @param {ConfirmPaymentRequest} [confirmPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async confirm(
      id: string,
      confirmPaymentRequest?: ConfirmPaymentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.confirm(
        id,
        confirmPaymentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.confirm']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new payment with the specified parameters.  You can create a payment in two ways:  1. **Immediate processing**: Provide a `paymentToken` or `paymentMethod` - The payment will be processed instantly 2. **Deferred processing**: Create without payment details - The payment remains in `PENDING` status until you    confirm it later using the [confirm endpoint](https://docs.monei.com/apis/rest/payments-confirm/)  When creating a payment without payment details, you can redirect customers to the hosted payment page where they can select their preferred payment method and complete the transaction.  For immediate processing, use one of these token options:  - A temporary `paymentToken` generated on the frontend using [monei.js Components](https://docs.monei.com/monei-js/overview/) - A permanent `paymentToken` from a previous successful payment (when `generatePaymentToken: true` was included)  Permanent tokens enable one-click checkout experiences for returning customers by allowing you to securely store and reuse payment details without requiring customers to re-enter their information.
     * @summary Create Payment
     * @param {CreatePaymentRequest} createPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createPaymentRequest: CreatePaymentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createPaymentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.create']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves the complete details of an existing payment by its unique ID.  This endpoint returns all available information about the payment, including its current status, amount, customer details, timestamps, and transaction history. Use this to check the status of a payment, verify payment details, or retrieve information for your records.  Supply the unique payment ID that was returned from your previous request.
     * @summary Get Payment
     * @param {string} id The payment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async get(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.get(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.get']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a subsequent charge using the payment details from a previous transaction.  This endpoint enables recurring billing and subscription payments by:  - Using the same payment method as the original payment - Charging the customer without requiring them to re-enter payment details - Supporting variable or fixed amounts (defaults to the original payment amount if not specified)  **Prerequisites:**  1. The initial payment must be created with the `sequence` parameter 2. The initial payment will return a `sequenceId` in the response 3. This `sequenceId` must be provided in the URL path when making subsequent recurring charges  Ideal for subscription services, membership renewals, and installment payments.  **Need more advanced subscription management?** For comprehensive subscription management with features like billing cycles, trial periods, and automatic recurring billing, consider using the [Subscriptions API](https://docs.monei.com/apis/rest/subscriptions/) instead. It provides a complete solution for creating and managing subscription-based services.
     * @summary Recurring Payment
     * @param {string} sequenceId The sequence ID
     * @param {RecurringPaymentRequest} [recurringPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recurring(
      sequenceId: string,
      recurringPaymentRequest?: RecurringPaymentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.recurring(
        sequenceId,
        recurringPaymentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.recurring']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Returns funds from a completed payment back to the customer\'s original payment method.  **Refund options:**  - **Full refund**: Return the entire payment amount - **Partial refund**: Specify an amount less than the original payment - **Multiple partial refunds**: Issue several partial refunds until the total payment amount is reached  **Limitations:**  - You can only refund payments that have been successfully processed - A payment can only be refunded up to its original amount - Once fully refunded, a payment cannot be refunded again - Attempting to refund more than the remaining available amount will result in an error
     * @summary Refund Payment
     * @param {string} id The payment ID
     * @param {RefundPaymentRequest} [refundPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refund(
      id: string,
      refundPaymentRequest?: RefundPaymentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refund(
        id,
        refundPaymentRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.refund']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Sends a payment link to the customer through their preferred communication channel.  **This API can only be used for payments with the following status:**  - Pending  **Delivery channels are automatically selected based on available customer information:**  - If customer email is available: Link is sent via email - If customer phone is available: Link is sent via WhatsApp - If WhatsApp delivery fails: Link is sent via SMS as a fallback  The payment link allows customers to complete the payment at their convenience using their preferred payment method on the secure MONEI payment page. If no customer contact information is provided, the system will use the details stored in the payment record.
     * @summary Send Payment Link
     * @param {string} id The payment ID
     * @param {SendPaymentLinkRequest} [sendPaymentLinkRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendLink(
      id: string,
      sendPaymentLinkRequest?: SendPaymentLinkRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sendLink(
        id,
        sendPaymentLinkRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.sendLink']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Sends a payment receipt to the customer through their preferred communication channel.  **This API can only be used for payments with the following status:**  - Succeeded  **Delivery channels are automatically selected based on available customer information:**  - If customer email is available: Receipt is sent via email - If customer phone is available: Receipt is sent via WhatsApp - If WhatsApp delivery fails: Receipt is sent via SMS as a fallback  The receipt includes payment details such as amount, date, transaction ID, and merchant information, providing customers with a record of their successful transaction. If no customer contact information is provided, the system will use the details stored in the payment record.
     * @summary Send Payment Receipt
     * @param {string} id The payment ID
     * @param {SendPaymentReceiptRequest} [sendPaymentReceiptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendReceipt(
      id: string,
      sendPaymentReceiptRequest?: SendPaymentReceiptRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sendReceipt(
        id,
        sendPaymentReceiptRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.sendReceipt']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Sends a direct payment request to the customer\'s phone with smart channel selection.  **Smart delivery logic based on customer phone capabilities:**  - If the phone number is registered with Bizum and that payment method is available:   The customer receives a push notification in their banking app to instantly approve the payment - If Bizum is not available or the phone is not registered with Bizum:   The customer receives a payment link via WhatsApp to complete the payment  This endpoint provides a streamlined payment experience, especially for Spanish customers with Bizum integration, enabling quick and convenient mobile payments.
     * @summary Send Payment Request
     * @param {string} id The payment ID
     * @param {SendPaymentRequestRequest} sendPaymentRequestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendRequest(
      id: string,
      sendPaymentRequestRequest: SendPaymentRequestRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sendRequest(
        id,
        sendPaymentRequestRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['PaymentsApi.sendRequest']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PaymentsApiFp(configuration);
  return {
    /**
     * Releases reserved funds from a previously authorized payment. This endpoint can only be used with payments in `AUTHORIZED` status.  This operation is part of the two-step authorization flow:  1. **Authorize**: Create a payment with `transactionType: AUTH` to reserve funds 2. **Cancel**: Release the reserved funds if you decide not to capture the payment  Cancellation makes the reserved funds available to the customer again and prevents you from being able to capture those funds in the future. Once cancelled, an authorization cannot be reactivated.
     * @summary Cancel Payment
     * @param {string} id The payment ID
     * @param {CancelPaymentRequest} [cancelPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancel(
      id: string,
      cancelPaymentRequest?: CancelPaymentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .cancel(id, cancelPaymentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Captures funds from a previously authorized payment. This endpoint can only be used with payments in `AUTHORIZED` status.  This operation completes the two-step authorization flow:  1. **Authorize**: Create a payment with `transactionType: AUTH` to reserve funds 2. **Capture**: Transfer the reserved funds to your account when ready to fulfill the order  **Important**: Authorized payments expire after exactly seven days. After expiration, they will be marked as `EXPIRED` and can no longer be captured. Be sure to capture funds within this timeframe or communicate with your customer about a new payment.
     * @summary Capture Payment
     * @param {string} id The payment ID
     * @param {CapturePaymentRequest} [capturePaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    capture(
      id: string,
      capturePaymentRequest?: CapturePaymentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .capture(id, capturePaymentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Confirms a payment that was created without payment details. This endpoint can only be used with payments in `PENDING` status.  The two-step payment flow:  1. **Create**: First, create a payment without payment details (status: `PENDING`) 2. **Confirm**: Then provide payment details to complete the transaction  When confirming a payment, you can use:  - A newly generated `paymentToken` from [monei.js Components](https://docs.monei.com/monei-js/overview/) - A permanent `paymentToken` from a previous payment (generated with `generatePaymentToken: true`)  Using permanent payment tokens enables one-click checkout experiences for returning customers without requiring them to re-enter their payment information.  You can provide additional customer information during confirmation, which will override any corresponding information originally passed in the payment creation request.
     * @summary Confirm Payment
     * @param {string} id The payment ID
     * @param {ConfirmPaymentRequest} [confirmPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirm(
      id: string,
      confirmPaymentRequest?: ConfirmPaymentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .confirm(id, confirmPaymentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new payment with the specified parameters.  You can create a payment in two ways:  1. **Immediate processing**: Provide a `paymentToken` or `paymentMethod` - The payment will be processed instantly 2. **Deferred processing**: Create without payment details - The payment remains in `PENDING` status until you    confirm it later using the [confirm endpoint](https://docs.monei.com/apis/rest/payments-confirm/)  When creating a payment without payment details, you can redirect customers to the hosted payment page where they can select their preferred payment method and complete the transaction.  For immediate processing, use one of these token options:  - A temporary `paymentToken` generated on the frontend using [monei.js Components](https://docs.monei.com/monei-js/overview/) - A permanent `paymentToken` from a previous successful payment (when `generatePaymentToken: true` was included)  Permanent tokens enable one-click checkout experiences for returning customers by allowing you to securely store and reuse payment details without requiring customers to re-enter their information.
     * @summary Create Payment
     * @param {CreatePaymentRequest} createPaymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      createPaymentRequest: CreatePaymentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .create(createPaymentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves the complete details of an existing payment by its unique ID.  This endpoint returns all available information about the payment, including its current status, amount, customer details, timestamps, and transaction history. Use this to check the status of a payment, verify payment details, or retrieve information for your records.  Supply the unique payment ID that was returned from your previous request.
     * @summary Get Payment
     * @param {string} id The payment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Payment> {
      return localVarFp.get(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Creates a subsequent charge using the payment details from a previous transaction.  This endpoint enables recurring billing and subscription payments by:  - Using the same payment method as the original payment - Charging the customer without requiring them to re-enter payment details - Supporting variable or fixed amounts (defaults to the original payment amount if not specified)  **Prerequisites:**  1. The initial payment must be created with the `sequence` parameter 2. The initial payment will return a `sequenceId` in the response 3. This `sequenceId` must be provided in the URL path when making subsequent recurring charges  Ideal for subscription services, membership renewals, and installment payments.  **Need more advanced subscription management?** For comprehensive subscription management with features like billing cycles, trial periods, and automatic recurring billing, consider using the [Subscriptions API](https://docs.monei.com/apis/rest/subscriptions/) instead. It provides a complete solution for creating and managing subscription-based services.
     * @summary Recurring Payment
     * @param {string} sequenceId The sequence ID
     * @param {RecurringPaymentRequest} [recurringPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recurring(
      sequenceId: string,
      recurringPaymentRequest?: RecurringPaymentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .recurring(sequenceId, recurringPaymentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns funds from a completed payment back to the customer\'s original payment method.  **Refund options:**  - **Full refund**: Return the entire payment amount - **Partial refund**: Specify an amount less than the original payment - **Multiple partial refunds**: Issue several partial refunds until the total payment amount is reached  **Limitations:**  - You can only refund payments that have been successfully processed - A payment can only be refunded up to its original amount - Once fully refunded, a payment cannot be refunded again - Attempting to refund more than the remaining available amount will result in an error
     * @summary Refund Payment
     * @param {string} id The payment ID
     * @param {RefundPaymentRequest} [refundPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refund(
      id: string,
      refundPaymentRequest?: RefundPaymentRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .refund(id, refundPaymentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Sends a payment link to the customer through their preferred communication channel.  **This API can only be used for payments with the following status:**  - Pending  **Delivery channels are automatically selected based on available customer information:**  - If customer email is available: Link is sent via email - If customer phone is available: Link is sent via WhatsApp - If WhatsApp delivery fails: Link is sent via SMS as a fallback  The payment link allows customers to complete the payment at their convenience using their preferred payment method on the secure MONEI payment page. If no customer contact information is provided, the system will use the details stored in the payment record.
     * @summary Send Payment Link
     * @param {string} id The payment ID
     * @param {SendPaymentLinkRequest} [sendPaymentLinkRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendLink(
      id: string,
      sendPaymentLinkRequest?: SendPaymentLinkRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .sendLink(id, sendPaymentLinkRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Sends a payment receipt to the customer through their preferred communication channel.  **This API can only be used for payments with the following status:**  - Succeeded  **Delivery channels are automatically selected based on available customer information:**  - If customer email is available: Receipt is sent via email - If customer phone is available: Receipt is sent via WhatsApp - If WhatsApp delivery fails: Receipt is sent via SMS as a fallback  The receipt includes payment details such as amount, date, transaction ID, and merchant information, providing customers with a record of their successful transaction. If no customer contact information is provided, the system will use the details stored in the payment record.
     * @summary Send Payment Receipt
     * @param {string} id The payment ID
     * @param {SendPaymentReceiptRequest} [sendPaymentReceiptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendReceipt(
      id: string,
      sendPaymentReceiptRequest?: SendPaymentReceiptRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .sendReceipt(id, sendPaymentReceiptRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Sends a direct payment request to the customer\'s phone with smart channel selection.  **Smart delivery logic based on customer phone capabilities:**  - If the phone number is registered with Bizum and that payment method is available:   The customer receives a push notification in their banking app to instantly approve the payment - If Bizum is not available or the phone is not registered with Bizum:   The customer receives a payment link via WhatsApp to complete the payment  This endpoint provides a streamlined payment experience, especially for Spanish customers with Bizum integration, enabling quick and convenient mobile payments.
     * @summary Send Payment Request
     * @param {string} id The payment ID
     * @param {SendPaymentRequestRequest} sendPaymentRequestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendRequest(
      id: string,
      sendPaymentRequestRequest: SendPaymentRequestRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Payment> {
      return localVarFp
        .sendRequest(id, sendPaymentRequestRequest, options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
  /**
   * Releases reserved funds from a previously authorized payment. This endpoint can only be used with payments in `AUTHORIZED` status.  This operation is part of the two-step authorization flow:  1. **Authorize**: Create a payment with `transactionType: AUTH` to reserve funds 2. **Cancel**: Release the reserved funds if you decide not to capture the payment  Cancellation makes the reserved funds available to the customer again and prevents you from being able to capture those funds in the future. Once cancelled, an authorization cannot be reactivated.
   * @summary Cancel Payment
   * @param {string} id The payment ID
   * @param {CancelPaymentRequest} [cancelPaymentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public cancel(
    id: string,
    cancelPaymentRequest?: CancelPaymentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentsApiFp(this.configuration)
      .cancel(id, cancelPaymentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Captures funds from a previously authorized payment. This endpoint can only be used with payments in `AUTHORIZED` status.  This operation completes the two-step authorization flow:  1. **Authorize**: Create a payment with `transactionType: AUTH` to reserve funds 2. **Capture**: Transfer the reserved funds to your account when ready to fulfill the order  **Important**: Authorized payments expire after exactly seven days. After expiration, they will be marked as `EXPIRED` and can no longer be captured. Be sure to capture funds within this timeframe or communicate with your customer about a new payment.
   * @summary Capture Payment
   * @param {string} id The payment ID
   * @param {CapturePaymentRequest} [capturePaymentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public capture(
    id: string,
    capturePaymentRequest?: CapturePaymentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentsApiFp(this.configuration)
      .capture(id, capturePaymentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Confirms a payment that was created without payment details. This endpoint can only be used with payments in `PENDING` status.  The two-step payment flow:  1. **Create**: First, create a payment without payment details (status: `PENDING`) 2. **Confirm**: Then provide payment details to complete the transaction  When confirming a payment, you can use:  - A newly generated `paymentToken` from [monei.js Components](https://docs.monei.com/monei-js/overview/) - A permanent `paymentToken` from a previous payment (generated with `generatePaymentToken: true`)  Using permanent payment tokens enables one-click checkout experiences for returning customers without requiring them to re-enter their payment information.  You can provide additional customer information during confirmation, which will override any corresponding information originally passed in the payment creation request.
   * @summary Confirm Payment
   * @param {string} id The payment ID
   * @param {ConfirmPaymentRequest} [confirmPaymentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public confirm(
    id: string,
    confirmPaymentRequest?: ConfirmPaymentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentsApiFp(this.configuration)
      .confirm(id, confirmPaymentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new payment with the specified parameters.  You can create a payment in two ways:  1. **Immediate processing**: Provide a `paymentToken` or `paymentMethod` - The payment will be processed instantly 2. **Deferred processing**: Create without payment details - The payment remains in `PENDING` status until you    confirm it later using the [confirm endpoint](https://docs.monei.com/apis/rest/payments-confirm/)  When creating a payment without payment details, you can redirect customers to the hosted payment page where they can select their preferred payment method and complete the transaction.  For immediate processing, use one of these token options:  - A temporary `paymentToken` generated on the frontend using [monei.js Components](https://docs.monei.com/monei-js/overview/) - A permanent `paymentToken` from a previous successful payment (when `generatePaymentToken: true` was included)  Permanent tokens enable one-click checkout experiences for returning customers by allowing you to securely store and reuse payment details without requiring customers to re-enter their information.
   * @summary Create Payment
   * @param {CreatePaymentRequest} createPaymentRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public create(createPaymentRequest: CreatePaymentRequest, options?: RawAxiosRequestConfig) {
    return PaymentsApiFp(this.configuration)
      .create(createPaymentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves the complete details of an existing payment by its unique ID.  This endpoint returns all available information about the payment, including its current status, amount, customer details, timestamps, and transaction history. Use this to check the status of a payment, verify payment details, or retrieve information for your records.  Supply the unique payment ID that was returned from your previous request.
   * @summary Get Payment
   * @param {string} id The payment ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public get(id: string, options?: RawAxiosRequestConfig) {
    return PaymentsApiFp(this.configuration)
      .get(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a subsequent charge using the payment details from a previous transaction.  This endpoint enables recurring billing and subscription payments by:  - Using the same payment method as the original payment - Charging the customer without requiring them to re-enter payment details - Supporting variable or fixed amounts (defaults to the original payment amount if not specified)  **Prerequisites:**  1. The initial payment must be created with the `sequence` parameter 2. The initial payment will return a `sequenceId` in the response 3. This `sequenceId` must be provided in the URL path when making subsequent recurring charges  Ideal for subscription services, membership renewals, and installment payments.  **Need more advanced subscription management?** For comprehensive subscription management with features like billing cycles, trial periods, and automatic recurring billing, consider using the [Subscriptions API](https://docs.monei.com/apis/rest/subscriptions/) instead. It provides a complete solution for creating and managing subscription-based services.
   * @summary Recurring Payment
   * @param {string} sequenceId The sequence ID
   * @param {RecurringPaymentRequest} [recurringPaymentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public recurring(
    sequenceId: string,
    recurringPaymentRequest?: RecurringPaymentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentsApiFp(this.configuration)
      .recurring(sequenceId, recurringPaymentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns funds from a completed payment back to the customer\'s original payment method.  **Refund options:**  - **Full refund**: Return the entire payment amount - **Partial refund**: Specify an amount less than the original payment - **Multiple partial refunds**: Issue several partial refunds until the total payment amount is reached  **Limitations:**  - You can only refund payments that have been successfully processed - A payment can only be refunded up to its original amount - Once fully refunded, a payment cannot be refunded again - Attempting to refund more than the remaining available amount will result in an error
   * @summary Refund Payment
   * @param {string} id The payment ID
   * @param {RefundPaymentRequest} [refundPaymentRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public refund(
    id: string,
    refundPaymentRequest?: RefundPaymentRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentsApiFp(this.configuration)
      .refund(id, refundPaymentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Sends a payment link to the customer through their preferred communication channel.  **This API can only be used for payments with the following status:**  - Pending  **Delivery channels are automatically selected based on available customer information:**  - If customer email is available: Link is sent via email - If customer phone is available: Link is sent via WhatsApp - If WhatsApp delivery fails: Link is sent via SMS as a fallback  The payment link allows customers to complete the payment at their convenience using their preferred payment method on the secure MONEI payment page. If no customer contact information is provided, the system will use the details stored in the payment record.
   * @summary Send Payment Link
   * @param {string} id The payment ID
   * @param {SendPaymentLinkRequest} [sendPaymentLinkRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public sendLink(
    id: string,
    sendPaymentLinkRequest?: SendPaymentLinkRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentsApiFp(this.configuration)
      .sendLink(id, sendPaymentLinkRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Sends a payment receipt to the customer through their preferred communication channel.  **This API can only be used for payments with the following status:**  - Succeeded  **Delivery channels are automatically selected based on available customer information:**  - If customer email is available: Receipt is sent via email - If customer phone is available: Receipt is sent via WhatsApp - If WhatsApp delivery fails: Receipt is sent via SMS as a fallback  The receipt includes payment details such as amount, date, transaction ID, and merchant information, providing customers with a record of their successful transaction. If no customer contact information is provided, the system will use the details stored in the payment record.
   * @summary Send Payment Receipt
   * @param {string} id The payment ID
   * @param {SendPaymentReceiptRequest} [sendPaymentReceiptRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public sendReceipt(
    id: string,
    sendPaymentReceiptRequest?: SendPaymentReceiptRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentsApiFp(this.configuration)
      .sendReceipt(id, sendPaymentReceiptRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Sends a direct payment request to the customer\'s phone with smart channel selection.  **Smart delivery logic based on customer phone capabilities:**  - If the phone number is registered with Bizum and that payment method is available:   The customer receives a push notification in their banking app to instantly approve the payment - If Bizum is not available or the phone is not registered with Bizum:   The customer receives a payment link via WhatsApp to complete the payment  This endpoint provides a streamlined payment experience, especially for Spanish customers with Bizum integration, enabling quick and convenient mobile payments.
   * @summary Send Payment Request
   * @param {string} id The payment ID
   * @param {SendPaymentRequestRequest} sendPaymentRequestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentsApi
   */
  public sendRequest(
    id: string,
    sendPaymentRequestRequest: SendPaymentRequestRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PaymentsApiFp(this.configuration)
      .sendRequest(id, sendPaymentRequestRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

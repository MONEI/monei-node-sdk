/* tslint:disable */
/* eslint-disable */
/**
 * MONEI API v1
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.6.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from '../configuration';
import type {AxiosPromise, AxiosInstance, RawAxiosRequestConfig} from '../axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap
} from '../base';
// @ts-ignore
import type {ApplePayDomainRegister200Response} from '../model';
// @ts-ignore
import type {BadRequestError} from '../model';
// @ts-ignore
import type {InternalServerError} from '../model';
// @ts-ignore
import type {NotFoundError} from '../model';
// @ts-ignore
import type {RegisterApplePayDomainRequest} from '../model';
// @ts-ignore
import type {ServiceUnavailableError} from '../model';
// @ts-ignore
import type {UnauthorizedError} from '../model';
// @ts-ignore
import type {UnprocessableEntityError} from '../model';
/**
 * ApplePayDomainApi - axios parameter creator
 * @export
 */
export const ApplePayDomainApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Registers a domain with Apple Pay.  This endpoint allows you to register your website domain with Apple Pay, which is required before you can accept Apple Pay payments on your website. The domain must be accessible via HTTPS and have a valid SSL certificate.  Before registering, you must download this [domain association file](https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/) and host it at `/.well-known/apple-developer-merchantid-domain-association` on your site.  For example, if you\'re registering `example.com`, make that file available at `https://example.com/.well-known/apple-developer-merchantid-domain-association`.  After registration, Apple will verify your domain. Once verified, you can display Apple Pay buttons and process Apple Pay payments on your website.
     * @summary Register Domain
     * @param {RegisterApplePayDomainRequest} registerApplePayDomainRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (
      registerApplePayDomainRequest: RegisterApplePayDomainRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'registerApplePayDomainRequest' is not null or undefined
      assertParamExists('register', 'registerApplePayDomainRequest', registerApplePayDomainRequest);
      const localVarPath = `/apple-pay/domains`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerApplePayDomainRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ApplePayDomainApi - functional programming interface
 * @export
 */
export const ApplePayDomainApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ApplePayDomainApiAxiosParamCreator(configuration);
  return {
    /**
     * Registers a domain with Apple Pay.  This endpoint allows you to register your website domain with Apple Pay, which is required before you can accept Apple Pay payments on your website. The domain must be accessible via HTTPS and have a valid SSL certificate.  Before registering, you must download this [domain association file](https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/) and host it at `/.well-known/apple-developer-merchantid-domain-association` on your site.  For example, if you\'re registering `example.com`, make that file available at `https://example.com/.well-known/apple-developer-merchantid-domain-association`.  After registration, Apple will verify your domain. Once verified, you can display Apple Pay buttons and process Apple Pay payments on your website.
     * @summary Register Domain
     * @param {RegisterApplePayDomainRequest} registerApplePayDomainRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      registerApplePayDomainRequest: RegisterApplePayDomainRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplePayDomainRegister200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(
        registerApplePayDomainRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ApplePayDomainApi.register']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * ApplePayDomainApi - factory interface
 * @export
 */
export const ApplePayDomainApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ApplePayDomainApiFp(configuration);
  return {
    /**
     * Registers a domain with Apple Pay.  This endpoint allows you to register your website domain with Apple Pay, which is required before you can accept Apple Pay payments on your website. The domain must be accessible via HTTPS and have a valid SSL certificate.  Before registering, you must download this [domain association file](https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/) and host it at `/.well-known/apple-developer-merchantid-domain-association` on your site.  For example, if you\'re registering `example.com`, make that file available at `https://example.com/.well-known/apple-developer-merchantid-domain-association`.  After registration, Apple will verify your domain. Once verified, you can display Apple Pay buttons and process Apple Pay payments on your website.
     * @summary Register Domain
     * @param {RegisterApplePayDomainRequest} registerApplePayDomainRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(
      registerApplePayDomainRequest: RegisterApplePayDomainRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApplePayDomainRegister200Response> {
      return localVarFp
        .register(registerApplePayDomainRequest, options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * ApplePayDomainApi - object-oriented interface
 * @export
 * @class ApplePayDomainApi
 * @extends {BaseAPI}
 */
export class ApplePayDomainApi extends BaseAPI {
  /**
   * Registers a domain with Apple Pay.  This endpoint allows you to register your website domain with Apple Pay, which is required before you can accept Apple Pay payments on your website. The domain must be accessible via HTTPS and have a valid SSL certificate.  Before registering, you must download this [domain association file](https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/) and host it at `/.well-known/apple-developer-merchantid-domain-association` on your site.  For example, if you\'re registering `example.com`, make that file available at `https://example.com/.well-known/apple-developer-merchantid-domain-association`.  After registration, Apple will verify your domain. Once verified, you can display Apple Pay buttons and process Apple Pay payments on your website.
   * @summary Register Domain
   * @param {RegisterApplePayDomainRequest} registerApplePayDomainRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApplePayDomainApi
   */
  public register(
    registerApplePayDomainRequest: RegisterApplePayDomainRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ApplePayDomainApiFp(this.configuration)
      .register(registerApplePayDomainRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

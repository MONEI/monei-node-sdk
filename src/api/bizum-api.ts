/* tslint:disable */
/* eslint-disable */
/**
 * MONEI API v1
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.6.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from '../configuration';
import type {AxiosPromise, AxiosInstance, RawAxiosRequestConfig} from '../axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap
} from '../base';
// @ts-ignore
import type {BadRequestError} from '../model';
// @ts-ignore
import type {BizumValidatePhone200Response} from '../model';
// @ts-ignore
import type {InternalServerError} from '../model';
// @ts-ignore
import type {NotFoundError} from '../model';
// @ts-ignore
import type {ServiceUnavailableError} from '../model';
// @ts-ignore
import type {UnauthorizedError} from '../model';
// @ts-ignore
import type {UnprocessableEntityError} from '../model';
// @ts-ignore
import type {ValidateBizumPhoneRequest} from '../model';
/**
 * BizumApi - axios parameter creator
 * @export
 */
export const BizumApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Validates if a phone number is registered with Bizum.  Use this endpoint to check if a customer\'s phone number can be used for Bizum payments before attempting to process a payment. This helps provide a better user experience by preventing failed payment attempts for non-registered numbers.  The response will indicate whether the phone number is valid for Bizum payments.
     * @summary Validate Phone
     * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatePhone: async (
      validateBizumPhoneRequest: ValidateBizumPhoneRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'validateBizumPhoneRequest' is not null or undefined
      assertParamExists('validatePhone', 'validateBizumPhoneRequest', validateBizumPhoneRequest);
      const localVarPath = `/bizum/validate-phone`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication APIKey required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        validateBizumPhoneRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * BizumApi - functional programming interface
 * @export
 */
export const BizumApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BizumApiAxiosParamCreator(configuration);
  return {
    /**
     * Validates if a phone number is registered with Bizum.  Use this endpoint to check if a customer\'s phone number can be used for Bizum payments before attempting to process a payment. This helps provide a better user experience by preventing failed payment attempts for non-registered numbers.  The response will indicate whether the phone number is valid for Bizum payments.
     * @summary Validate Phone
     * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async validatePhone(
      validateBizumPhoneRequest: ValidateBizumPhoneRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BizumValidatePhone200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.validatePhone(
        validateBizumPhoneRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BizumApi.validatePhone']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    }
  };
};

/**
 * BizumApi - factory interface
 * @export
 */
export const BizumApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BizumApiFp(configuration);
  return {
    /**
     * Validates if a phone number is registered with Bizum.  Use this endpoint to check if a customer\'s phone number can be used for Bizum payments before attempting to process a payment. This helps provide a better user experience by preventing failed payment attempts for non-registered numbers.  The response will indicate whether the phone number is valid for Bizum payments.
     * @summary Validate Phone
     * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatePhone(
      validateBizumPhoneRequest: ValidateBizumPhoneRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<BizumValidatePhone200Response> {
      return localVarFp
        .validatePhone(validateBizumPhoneRequest, options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * BizumApi - object-oriented interface
 * @export
 * @class BizumApi
 * @extends {BaseAPI}
 */
export class BizumApi extends BaseAPI {
  /**
   * Validates if a phone number is registered with Bizum.  Use this endpoint to check if a customer\'s phone number can be used for Bizum payments before attempting to process a payment. This helps provide a better user experience by preventing failed payment attempts for non-registered numbers.  The response will indicate whether the phone number is valid for Bizum payments.
   * @summary Validate Phone
   * @param {ValidateBizumPhoneRequest} validateBizumPhoneRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BizumApi
   */
  public validatePhone(
    validateBizumPhoneRequest: ValidateBizumPhoneRequest,
    options?: RawAxiosRequestConfig
  ) {
    return BizumApiFp(this.configuration)
      .validatePhone(validateBizumPhoneRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * MONEI API v1
 * The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.  # Authentication  <!-- Redoc-Inject: <security-definitions> --> 
 *
 * The version of the OpenAPI document: 1.5.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { PaymentPaymentMethodBizum } from './payment-payment-method-bizum';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentPaymentMethodCard } from './payment-payment-method-card';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentPaymentMethodCofidis } from './payment-payment-method-cofidis';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentPaymentMethodKlarna } from './payment-payment-method-klarna';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentPaymentMethodMbway } from './payment-payment-method-mbway';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentPaymentMethodPaypal } from './payment-payment-method-paypal';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentPaymentMethodSepa } from './payment-payment-method-sepa';
// May contain unused imports in some cases
// @ts-ignore
import type { PaymentPaymentMethodTrustly } from './payment-payment-method-trustly';

/**
 * Details about the payment method at the time of the transaction. 
 * @export
 * @interface PaymentPaymentMethod
 */
export interface PaymentPaymentMethod {
    /**
     * Payment method type.
     * @type {string}
     * @memberof PaymentPaymentMethod
     */
    'method'?: PaymentPaymentMethodMethodEnum;
    /**
     * 
     * @type {PaymentPaymentMethodCard}
     * @memberof PaymentPaymentMethod
     */
    'card'?: PaymentPaymentMethodCard;
    /**
     * 
     * @type {PaymentPaymentMethodBizum}
     * @memberof PaymentPaymentMethod
     */
    'bizum'?: PaymentPaymentMethodBizum;
    /**
     * 
     * @type {PaymentPaymentMethodPaypal}
     * @memberof PaymentPaymentMethod
     */
    'paypal'?: PaymentPaymentMethodPaypal;
    /**
     * 
     * @type {PaymentPaymentMethodCofidis}
     * @memberof PaymentPaymentMethod
     */
    'cofidis'?: PaymentPaymentMethodCofidis;
    /**
     * 
     * @type {PaymentPaymentMethodCofidis}
     * @memberof PaymentPaymentMethod
     */
    'cofidisLoan'?: PaymentPaymentMethodCofidis;
    /**
     * 
     * @type {PaymentPaymentMethodMbway}
     * @memberof PaymentPaymentMethod
     */
    'mbway'?: PaymentPaymentMethodMbway;
    /**
     * 
     * @type {PaymentPaymentMethodTrustly}
     * @memberof PaymentPaymentMethod
     */
    'trustly'?: PaymentPaymentMethodTrustly;
    /**
     * 
     * @type {PaymentPaymentMethodSepa}
     * @memberof PaymentPaymentMethod
     */
    'sepa'?: PaymentPaymentMethodSepa;
    /**
     * 
     * @type {PaymentPaymentMethodKlarna}
     * @memberof PaymentPaymentMethod
     */
    'klarna'?: PaymentPaymentMethodKlarna;
}

export const PaymentPaymentMethodMethodEnum = {
    alipay: 'alipay',
    card: 'card',
    bizum: 'bizum',
    paypal: 'paypal',
    cofidis: 'cofidis',
    cofidisLoan: 'cofidisLoan',
    mbway: 'mbway',
    multibanco: 'multibanco',
    iDeal: 'iDeal',
    bancontact: 'bancontact',
    sofort: 'sofort',
    trustly: 'trustly',
    sepa: 'sepa',
    klarna: 'klarna',
    giropay: 'giropay',
    eps: 'eps',
    blik: 'blik'
} as const;

export type PaymentPaymentMethodMethodEnum = typeof PaymentPaymentMethodMethodEnum[keyof typeof PaymentPaymentMethodMethodEnum];



/* tslint:disable */
/* eslint-disable */
/**
 * MONEI API v1
 * The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer) principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.  # Authentication  <!-- Redoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Details about the card used as payment method at the time of the transaction.
 * @export
 * @interface PaymentPaymentMethodCard
 */
export interface PaymentPaymentMethodCard {
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  country?: string;
  /**
   * Card brand.
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  brand?: PaymentPaymentMethodCardBrandEnum;
  /**
   * Card type `debit` or `credit`.
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  type?: PaymentPaymentMethodCardTypeEnum;
  /**
   * Whether this transaction used 3D Secure authentication.
   * @type {boolean}
   * @memberof PaymentPaymentMethodCard
   */
  threeDSecure?: boolean;
  /**
   * The protocol version of the 3DS challenge.
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  threeDSecureVersion?: string;
  /**
   * The flow used for 3DS authentication. - `CHALLENGE` - In a challenge flow, the issuer requires additional shopper interaction, either through biometrics, two-factor authentication, or similar methods based on [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) factors. - `FRICTIONLESS` - In a frictionless flow, the acquirer, issuer, and card scheme exchange all necessary     information in the background through passive authentication using the shopper\'s device     fingerprint. The transaction is completed without further shopper interaction. - `FRICTIONLESS_CHALLENGE` - This flow is the complete 3DS flow. It is similar to the 3DS frictionless flow but     includes an additional authentication step (challenge) that will be invoked if the     information provided in the data collection step does not suffice to determine the     risk-level of the transaction. - `DIRECT` - This transaction did not require [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) due to the low risk
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  threeDSecureFlow?: PaymentPaymentMethodCardThreeDSecureFlowEnum;
  /**
   * Time at which the card will expire. Measured in seconds since the Unix epoch.
   * @type {number}
   * @memberof PaymentPaymentMethodCard
   */
  expiration?: number;
  /**
   * The last four digits of the card.
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  last4?: string;
  /**
   * The digital wallet used to tokenize the card.
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  tokenizationMethod?: PaymentPaymentMethodCardTokenizationMethodEnum;
  /**
   * The name of the cardholder.
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  cardholderName?: string;
  /**
   * The email of the cardholder.
   * @type {string}
   * @memberof PaymentPaymentMethodCard
   */
  cardholderEmail?: string;
}

export const PaymentPaymentMethodCardBrandEnum = {
  visa: 'visa',
  mastercard: 'mastercard',
  diners: 'diners',
  amex: 'amex',
  jcb: 'jcb',
  unionpay: 'unionpay',
  unknown: 'unknown'
} as const;

export type PaymentPaymentMethodCardBrandEnum =
  (typeof PaymentPaymentMethodCardBrandEnum)[keyof typeof PaymentPaymentMethodCardBrandEnum];
export const PaymentPaymentMethodCardTypeEnum = {
  debit: 'debit',
  credit: 'credit'
} as const;

export type PaymentPaymentMethodCardTypeEnum =
  (typeof PaymentPaymentMethodCardTypeEnum)[keyof typeof PaymentPaymentMethodCardTypeEnum];
export const PaymentPaymentMethodCardThreeDSecureFlowEnum = {
  CHALLENGE: 'CHALLENGE',
  FRICTIONLESS: 'FRICTIONLESS',
  FRICTIONLESS_CHALLENGE: 'FRICTIONLESS_CHALLENGE',
  DIRECT: 'DIRECT'
} as const;

export type PaymentPaymentMethodCardThreeDSecureFlowEnum =
  (typeof PaymentPaymentMethodCardThreeDSecureFlowEnum)[keyof typeof PaymentPaymentMethodCardThreeDSecureFlowEnum];
export const PaymentPaymentMethodCardTokenizationMethodEnum = {
  applePay: 'applePay',
  googlePay: 'googlePay',
  clickToPay: 'clickToPay'
} as const;

export type PaymentPaymentMethodCardTokenizationMethodEnum =
  (typeof PaymentPaymentMethodCardTokenizationMethodEnum)[keyof typeof PaymentPaymentMethodCardTokenizationMethodEnum];

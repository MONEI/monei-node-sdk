/* tslint:disable */
/* eslint-disable */
/**
 * MONEI API v1
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.7.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// May contain unused imports in some cases
// @ts-ignore
import type {PaymentMethodsMetadata} from './payment-methods-metadata';
// May contain unused imports in some cases
// @ts-ignore
import type {PaymentMethodsMethods} from './payment-methods-methods';

/**
 *
 * @export
 * @interface PaymentMethods
 */
export interface PaymentMethods {
  /**
   * Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode.
   * @type {boolean}
   * @memberof PaymentMethods
   */
  livemode: boolean;
  /**
   *
   * @type {PaymentMethodsMethods}
   * @memberof PaymentMethods
   */
  paymentMethods: PaymentMethodsMethods;
  /**
   *
   * @type {PaymentMethodsMetadata}
   * @memberof PaymentMethods
   */
  metadata: PaymentMethodsMetadata;
  /**
   * The name of the merchant
   * @type {string}
   * @memberof PaymentMethods
   */
  merchantName: string;
  /**
   * The URL of the merchant\'s website
   * @type {string}
   * @memberof PaymentMethods
   */
  merchantUrl: string;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   * @type {string}
   * @memberof PaymentMethods
   */
  countryCode: string;
  /**
   * MONEI Account identifier.
   * @type {string}
   * @memberof PaymentMethods
   */
  accountId?: string;
  /**
   * The amount of the payment in the smallest currency unit. For example, 10 EUR = 1000 cents. Only present when querying by paymentId.
   * @type {number}
   * @memberof PaymentMethods
   */
  amount?: number;
  /**
   * Three-letter ISO currency code, in uppercase. Only present when querying by paymentId.
   * @type {string}
   * @memberof PaymentMethods
   */
  currency?: string;
}
